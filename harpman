#!/usr/bin/node

var Fraction = require('fractional').Fraction;
var colors = require('colors');
var argv = require('yargs')
  .usage('Usage: $0 [options]')
  .default('k', 'C')
  .alias('k', 'key')
  .describe('k', 'Harmonica tonality')
  .default('p', 'scale major')
  .alias('p', 'progression')
  .describe('p', 'scale or chord progression')
  //.default('t', 'C')
  .alias('t', 'tonality')
  .describe('t', 'Scale tonality')
  .default('o', '1-3')
  .describe('o', 'Octave range between 1 and 3')
  .alias('o', 'octaves')
  .help('h')
  .alias('h', 'help')
  .epilog('author: IceOnFire')
  .argv;

var notes = [ ' C', ' Db',  ' D', ' Eb',  ' E', ' F',  ' Gb',  ' G', ' Ab',   ' A',  ' Bb',   ' B' ];

var holes = [ ' 1', '-1\'', '-1', ' X',   ' 2', '-2"', '-2\'', '-2', '-3"\'', '-3"', '-3\'',  '-3',
              ' 4', '-4\'', '-4', ' 4\'', ' 5', '-5',  ' 5\'', ' 6', '-6\'',  '-6',  ' 6\'',  '-7',
              ' 7', '-7\'', '-8', ' 8\'', ' 8', '-9',  ' 9\'', ' 9', ' X',    '-10', '-10\'', ' 10\'',
              ' 10' ];

var steps = [ ' 1', ' b2', ' 2', ' b3',  ' 3',  ' 4',  ' b5',  ' 5',  ' b6',  ' 6',  ' b7',  ' 7',
              ' 8', ' b9', ' 9', ' b10', ' 10', ' 11', ' b12', ' 12', ' b13', ' 13', ' b14', ' 14' ];

var progressions = require('./progressions.json');

var tonalities = {
  'C' : 0,
  'C#' : 1, 'Db' : 1,
  'D' : 2,
  'D#' : 3, 'Eb' : 3,
  'E' : 4,
  'F' : 5,
  'F#' : 6, 'Gb' : 6,
  'G' : 7,
  'G#' : 8, 'Ab' : 8,
  'A' : 9,
  'A#' : 10, 'Bb' : 10,
  'B' : 11
}

var degrees = [ 'tonic', 'supertonic', 'mediant', 'subdominant', 'dominant', 'submediant', 'leading' ];

var getIntervals = function(progression, octave, octaves) {
  var o, i, theIntervals = [];
  for (o = octave; o < octaves; o += 1) {
    for (i = 0; i < progression.length - 1; i += 1) {
      theIntervals.push((progression[i + 1] - progression[i]) / 2);
    }
    theIntervals.push((progression[0] + 12 - progression[progression.length - 1]) / 2);
  }
  return theIntervals;
}

var getSteps = function(progression, octave, octaves) {
  var o, i, theSteps = [];
  for (o = octave; o < octaves; o += 1) {
    for (i = 0; i < progression.length; i += 1) {
      theSteps.push(steps[progression[i]]);
    }
  }
  theSteps.push(steps[0]);
  return theSteps;
}

var getNotes = function(progression, tonality, octave, octaves) {
  var o, i, theNotes = [];
  for (o = octave; o < octaves; o += 1) {
    for (i = 0; i < progression.length; i += 1) {
      theNotes.push(notes[(progression[i] + tonalities[tonality]) % 12] || ' X');
    }
  }
  theNotes.push(notes[(progression[0] + tonalities[tonality]) % 12] || ' X');
  return theNotes;
}

var getHoles = function(harpkey, progression, tonality, octave, octaves) {
  var o, i, theHoles = [];
  for (o = octave; o < octaves; o += 1) {
    for (i = 0; i < progression.length; i += 1) {
      theHoles.push(holes[progression[i] + tonalities[tonality] - tonalities[harpkey] + 12 * o] || ' X');
    }
  }
  theHoles.push(holes[progression[0] + tonalities[tonality] - tonalities[harpkey] + 12 * octaves] || ' X');
  return theHoles;
}

var harpkey = argv.k;
var progression = argv.p;
var tonality = argv.t || harpkey;
var octaves = argv.o;

var tokens = progression.split(' ');
progression = progressions;
for (var i = 0; i < tokens.length; i += 1) {
  progression = progression[tokens[i]];
}

tokens = octaves.split('-');
var octave = tokens[0];
octave -= 1;
octaves = tokens[1];

process.stdout.write('intv\t');
var theIntervals = getIntervals(progression, octave, octaves);
for (var i = 0; i < theIntervals.length; i += 1) {
  var theInterval = theIntervals[i];
  if (theInterval % 1 === 0) {
    theInterval = '     ' + theInterval;
  } else if (theInterval / 1 - theInterval % 1 <= 0) {
    theInterval = '    ' + new Fraction(theInterval).toString();
  } else {
    theInterval = '  ' + new Fraction(theInterval).toString();
  }
  process.stdout.write(theInterval + '\t');
}
process.stdout.write('\n');

process.stdout.write('step\t');
var theSteps = getSteps(progression, octave, octaves);
for (var i = 0; i < theSteps.length; i += 1) {
  process.stdout.write(theSteps[i] + '\t');
}
process.stdout.write('\n');

process.stdout.write('note\t');
var theNotes = getNotes(progression, tonality, octave, octaves);
for (var i = 0; i < theNotes.length; i += 1) {
  var theNote = theNotes[i];
  if (i % progression.length === 0) { // tonic
    theNote = colors.green.bold(theNote);
  } else if ((i % progression.length) % 6 === 0) { // leading
    theNote = colors.magenta.bold(theNote);
  } else if ((i % progression.length) % 4 === 0) { // dominant
    theNote = colors.blue.bold(theNote);
  } else if ((i % progression.length) % 2 === 0) { // mediant
    theNote = colors.yellow.dim(theNote);
  }
  process.stdout.write(theNote + '\t');
}
process.stdout.write('\n');

process.stdout.write('hole\t');
var theHoles = getHoles(harpkey, progression, tonality, octave, octaves);
for (var i = 0; i < theHoles.length; i += 1) {
  var theHole = theHoles[i];
  if (i % progression.length === 0) { // tonic
    theHole = colors.green.bold(theHole);
  } else if ((i % progression.length) % 6 === 0) { // leading
    theHole = colors.magenta.bold(theHole);
  } else if ((i % progression.length) % 4 === 0) { // dominant
    theHole = colors.blue.bold(theHole);
  } else if ((i % progression.length) % 2 === 0) { // mediant
    theHole = colors.yellow.dim(theHole);
  }
  process.stdout.write(theHole + '\t');
}
process.stdout.write('\n');
