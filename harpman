#!/usr/bin/node

var colors = require('colors');
var argv = require('yargs')
  .usage('Usage: $0 <command> [options]')
  .default('h', 'C')
  .alias('h', 'harp')
  .describe('h', 'Harmonica tonality')
  .default('s', 'heptatonic major natural')
  .alias('s', 'scale')
  .describe('s', 'A pentatonic or heptatonic scale')
  //.default('t', 'C')
  .alias('t', 'tonality')
  .describe('Scale tonality')
  .default('o', '1-3')
  .describe('o', 'Octave range between 1 and 3')
  .alias('o', 'octaves')
  .argv;

var notes = [ ' C', ' Db',  ' D', ' Eb',  ' E', ' F',  ' Gb',  ' G', ' Ab',   ' A',  ' Bb',   ' B' ];

var holes = [ ' 1', '-1\'', '-1', ' X',   ' 2', '-2"', '-2\'', '-2', '-3"\'', '-3"', '-3\'',  '-3',
              ' 4', '-4\'', '-4', ' 4\'', ' 5', '-5',  ' 5\'', ' 6', '-6\'',  '-6',  ' 6\'',  '-7',
              ' 7', '-7\'', '-8', ' 8\'', ' 8', '-9',  ' 9\'', ' 9', ' X',    '-10', '-10\'', ' 10\'',
              ' 10' ];

var scales = {
  pentatonic : {
    minor : [ 0, 3, 5, 7, 10 ],
    major : [ 0, 2, 4, 7, 9 ]
  },
  hexatonic : {
    blues : [ 0, 3, 5, 6, 7, 10 ] // derived from minor
  },
  heptatonic : {
    diatonic : {
      ionian :     [ 0, 2, 4, 5, 7, 9, 11 ],
      dorian :     [ 0, 2, 3, 5, 7, 9, 10 ],
      phrygian :   [ 0, 1, 3, 5, 7, 8, 10 ],
      lydian :     [ 0, 2, 4, 6, 7, 9, 11 ],
      mixolydian : [ 0, 2, 4, 5, 7, 9, 10 ],
      aeolian :    [ 0, 2, 3, 5, 7, 8, 10 ],
      locrian :    [ 0, 1, 3, 5, 6, 8, 10 ]
    },
    minor : {
      natural :  [ 0, 2, 3, 5, 7, 8, 10 ], // aeolian
      harmonic : [ 0, 2, 3, 5, 7, 8, 11 ],
      melodic : {
        ascending :  [ 0, 2, 3, 5, 7, 9, 11 ],
        descending : [ 0, 2, 3, 5, 7, 8, 10 ] // aeolian
      }
    },
    major : {
      natural : [ 0, 2, 4, 5, 7, 9, 11 ] // ionian
    },
    blues : [ 0, 3, 5, 6, 7, 10, 11 ] // one more note
  }
};

var tonalities = {
  'C' : 0,
  'C#' : 1, 'Db' : 1,
  'D' : 2,
  'D#' : 3, 'Eb' : 3,
  'E' : 4,
  'F' : 5,
  'F#' : 6, 'Gb' : 6,
  'G' : 7,
  'G#' : 8, 'Ab' : 8,
  'A' : 9,
  'A#' : 10, 'Bb' : 10,
  'B' : 11
}

var degrees = [ 'tonic', 'supertonic', 'mediant', 'subdominant', 'dominant', 'submediant', 'leading' ];

var getNotes = function(scale, tonality, octave, octaves) {
  var o, semitone, theNotes = [];
  for (o = octave; o < octaves; o += 1) {
    for (semitone = 0; semitone < scale.length; semitone += 1) {
      theNotes.push(notes[(scale[semitone] + tonalities[tonality]) % 12] || ' X');
    }
  }
  theNotes.push(notes[(scale[0] + tonalities[tonality]) % 12] || ' X');
  return theNotes;
}

var getHoles = function(harp, scale, tonality, octave, octaves) {
  var o, semitone, theHoles = [];
  for (o = octave; o < octaves; o += 1) {
    for (semitone = 0; semitone < scale.length; semitone += 1) {
      theHoles.push(holes[scale[semitone] + tonalities[tonality] - tonalities[harp] + 12 * o] || ' X');
    }
  }
  theHoles.push(holes[scale[0] + tonalities[tonality] - tonalities[harp] + 12 * octaves] || ' X');
  return theHoles;
}

var harp = argv.h;
var scale = argv.s;
var tonality = argv.t || harp;
var octaves = argv.o;

var tokens = scale.split(' ');
scale = scales;
for (var i = 0; i < tokens.length; i += 1) {
  scale = scale[tokens[i]];
}

tokens = octaves.split('-');
var octave = tokens[0] || 1;
octave -= 1;
octaves = tokens[1] || 1;

/*for (var i = 0; i < degrees.length; i += 1) {
    process.stdout.write(degrees[i] + '\t');
}
process.stdout.write('\n');*/

var theNotes = getNotes(scale, tonality, octave, octaves);
for (var i = 0; i < theNotes.length; i += 1) {
  var theNote = theNotes[i];
  if (i % scale.length === 0) { // tonic
    theNote = colors.green.bold(theNote);
  } else if ((i % scale.length) % 4 === 0) { // dominant
    theNote = colors.blue.bold(theNote);
  } else if ((i % scale.length) % 6 === 0) { // leading
    theNote = colors.magenta.bold(theNote);
  }
  process.stdout.write(theNote + '\t');
}
process.stdout.write('\n');

var theHoles = getHoles(harp, scale, tonality, octave, octaves);
for (var i = 0; i < theHoles.length; i += 1) {
  var theHole = theHoles[i];
  if (i % scale.length === 0) { // tonic
    theHole = colors.green.bold(theHole);
  } else if ((i % scale.length) % 4 === 0) { // dominant
    theHole = colors.blue.bold(theHole);
  } else if ((i % scale.length) % 6 === 0) { // leading
    theHole = colors.magenta.bold(theHole);
  }
  process.stdout.write(theHole + '\t');
}
process.stdout.write('\n');
