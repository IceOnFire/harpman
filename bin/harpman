#!/usr/local/bin/coffee

Fraction = require('fractional').Fraction
colors = require 'colors'
argv = require 'yargs'
  .usage 'Usage: $0 [options]'
  .alias 'k', 'key'
  .describe 'k', 'Harmonica key'
  .default 'k', 'C'
  .alias 'p', 'progression'
  .describe 'p', 'Scale or chord progression'
  .default 'p', 'scale major'
  .alias 't', 'tonality'
  .describe 't', 'Progression tonality'
  #.default 't', 'C'
  .alias 'o', 'octaves'
  .describe 'o', 'Octave range between 1 and 3'
  .default 'o', '1-3'
  .help 'h'
  .alias 'h', 'help'
  .epilog 'author: IceOnFire'
  .argv

harpman = require '../harpman'
progressions = (require 'cson').requireFile 'data/progressions.cson'

harpkey = argv.k
progression = argv.p
tonality = argv.t || harpkey
octaves = argv.o

tokens = progression.split ' '
progression = progressions
for token in tokens
  progression = progression[token]

tokens = octaves.split '-'
octave = tokens[0] - 1
octaves = tokens[1]

process.stdout.write 'intv\t'
intervals = harpman.getIntervals progression, octave, octaves
for interval in intervals
  if interval % 1 is 0
    interval = '     ' + interval
  else if interval / 1 - interval % 1 <= 0
    interval = '    ' + new Fraction(interval).toString()
  else
    interval = '  ' + new Fraction(interval).toString()
  process.stdout.write interval + '\t'
process.stdout.write '\n'

print = (string, i, size) ->
  if i % size is 0 # tonic
    string = colors.green.bold string
  else if (i % size) % 6 is 0 # leading
    string = colors.magenta.bold string
  else if (i % size) % 4 is 0 # dominant
    string = colors.blue.bold string
  else if (i % size) % 2 is 0 # mediant
    string = colors.yellow.dim string
  process.stdout.write string + '\t'

process.stdout.write 'step\t'
steps = harpman.getSteps progression, octave, octaves
for step, i in steps
  print step, i, progression.length
process.stdout.write '\n'

process.stdout.write 'note\t'
notes = harpman.getNotes progression, tonality, octave, octaves
for note, i in notes
  print note, i, progression.length
process.stdout.write '\n'

process.stdout.write 'hole\t'
holes = harpman.getHoles harpkey, progression, tonality, octave, octaves
for hole, i in holes
  print hole, i, progression.length
process.stdout.write '\n'
