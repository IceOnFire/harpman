#!/usr/local/bin/coffee

CSON = require 'cson'
stepNames = CSON.requireFile 'data/steps.cson'
harpman = require '../harpman'
colors = require 'colors'
argv = require 'yargs'
  .usage 'Usage: $0 [options]'
  .alias 'k', 'key'
  .describe 'k', 'Harmonica key'
  .default 'k', 'C'
  .alias 'p', 'progression'
  .describe 'p', 'Scale or chord progression'
  .default 'p', 'scale major'
  .alias 't', 'tonality'
  .describe 't', 'Progression tonality'
  #.default 't', 'C'
  .alias 'o', 'octaves'
  .describe 'o', 'Octave range between 1 and 3'
  .default 'o', '1-3'
  .help 'h'
  .alias 'h', 'help'
  .epilog 'author: IceOnFire'
  .argv

print = (string, step = string) ->
  string = switch
    when step is stepNames[0] then colors.green.bold string # tonic
    when step in stepNames[3..4] then colors.yellow.dim string # mediant
    when step in stepNames[6..7] then colors.blue.bold string # dominant
    when step in stepNames[10..11] then colors.magenta.bold string # leading
    else string
  process.stdout.write "#{string}\t"

harpkey = argv.k
progression = argv.p.split ' '
tonality = argv.t or harpkey
[octave, octaves] = argv.o.split '-'
octave -= 1

progression = do ->
  progressions = CSON.requireFile 'data/progressions.cson'
  tokens = progression
  progression = progressions
  progression = progression[token] for token in tokens
  progression

steps = () ->
  process.stdout.write "step\t"
  steps = harpman.getSteps progression, octave, octaves
  print step for step in steps
  process.stdout.write "\n"
  steps

notes = () ->
  process.stdout.write "note\t"
  notes = harpman.getNotes progression, tonality, octave, octaves
  print note, steps[i] for note, i in notes
  process.stdout.write "\n"
  return

holes = () ->
  process.stdout.write "hole\t"
  holes = harpman.getHoles harpkey, progression, tonality, octave, octaves
  print hole, steps[i] for hole, i in holes
  process.stdout.write "\n"
  return

intervals = () ->
  Fraction = (require 'fractional').Fraction
  pad = require 'node-string-pad'
  process.stdout.write "intv\t"
  intervals = harpman.getIntervals progression, octave, octaves
  for interval in intervals
    interval = (new Fraction interval).toString()
    process.stdout.write "#{pad interval, 7, 'LEFT'}\t"
  process.stdout.write "\n"
  return

steps()
notes()
holes()
intervals()
