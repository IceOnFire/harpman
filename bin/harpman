#!/usr/local/bin/coffee

Fraction = (require 'fractional').Fraction
colors = require 'colors'
argv = require 'yargs'
  .usage 'Usage: $0 [options]'
  .alias 'k', 'key'
  .describe 'k', 'Harmonica key'
  .default 'k', 'C'
  .alias 'p', 'progression'
  .describe 'p', 'Scale or chord progression'
  .default 'p', 'scale major'
  .alias 't', 'tonality'
  .describe 't', 'Progression tonality'
  #.default 't', 'C'
  .alias 'o', 'octaves'
  .describe 'o', 'Octave range between 1 and 3'
  .default 'o', '1-3'
  .help 'h'
  .alias 'h', 'help'
  .epilog 'author: IceOnFire'
  .argv

harpman = require '../harpman'
progressions = (require 'cson').requireFile 'data/progressions.cson'

print = (string, i, size) ->
  position = i % size
  string = switch
    when position is 0 then colors.green.bold string # tonic
    when position % 6 is 0 then colors.magenta.bold string # leading
    when position % 4 is 0 then colors.blue.bold string # dominant
    when position % 2 is 0 then colors.yellow.dim string # mediant
    else string
  process.stdout.write "#{string}\t"

harpkey = argv.k
progression = argv.p
tonality = argv.t or harpkey
octaves = argv.o

tokens = progression.split ' '
progression = progressions
progression = progression[token] for token in tokens

[octave, octaves] = octaves.split '-'
octave -= 1

process.stdout.write "intv\t"
intervals = harpman.getIntervals progression, octave, octaves
for interval in intervals
  interval = switch
    when interval % 1 is 0 then "     #{interval}"
    when interval // 1 is 0 then "    #{new Fraction(interval).toString()}"
    else "  #{new Fraction(interval).toString()}"
  process.stdout.write "#{interval}\t"
process.stdout.write "\n"

process.stdout.write "step\t"
steps = harpman.getSteps progression, octave, octaves
print step, i, progression.length for step, i in steps
process.stdout.write "\n"

process.stdout.write "note\t"
notes = harpman.getNotes progression, tonality, octave, octaves
print note, i, progression.length for note, i in notes
process.stdout.write "\n"

process.stdout.write "hole\t"
holes = harpman.getHoles harpkey, progression, tonality, octave, octaves
print hole, i, progression.length for hole, i in holes
process.stdout.write "\n"
